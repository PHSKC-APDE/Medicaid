--ED visit per 1,000

--STEP 1. Generate denominator, age 18+ on 06/30/2016 and 
--no more than one gap in enrollment up to 45 days during each year of continuous enrollment
--collapse overlapping date ranges
--continuous enrollment

SELECT DISTINCT MEDICAID_RECIPIENT_ID AS ID4
FROM PHClaims.dbo.vClaims
WHERE FROM_SRVC_DATE BETWEEN '2015-07-01' AND '2016-06-30'
AND CLM_TYPE_CID=22;


SELECT PRCDR_CODE_1, COUNT(MEDICAID_RECIPIENT_ID)
FROM PHClaims.dbo.vClaims
WHERE FROM_SRVC_DATE BETWEEN '2015-07-01' AND '2016-06-30'
GROUP BY PRCDR_CODE_1
ORDER BY PRCDR_CODE_1;

SELECT CLM_TYPE_CID, PRCDR_CODE_1, COUNT(MEDICAID_RECIPIENT_ID)
FROM PHClaims.dbo.vClaims
WHERE FROM_SRVC_DATE BETWEEN '2015-07-01' AND '2016-06-30'
GROUP BY CLM_TYPE_CID, PRCDR_CODE_1
ORDER BY CLM_TYPE_CID, PRCDR_CODE_1;

SELECT CLM_TYPE_CID, PLACE_OF_SERVICE, COUNT(MEDICAID_RECIPIENT_ID)
FROM PHClaims.dbo.vClaims
WHERE FROM_SRVC_DATE BETWEEN '2015-07-01' AND '2016-06-30'
GROUP BY CLM_TYPE_CID, PLACE_OF_SERVICE
ORDER BY CLM_TYPE_CID, PLACE_OF_SERVICE;

--Step 1a. the most recent year
SELECT DISTINCT ID, FR_DT, TO_DT INTO #A1_1
FROM
(SELECT ID,
CASE WHEN FROM_DATE<'2015-07-01' THEN '2015-07-01' ELSE FROM_DATE END FR_DT,
CASE WHEN TO_DATE>'2016-06-30' THEN '2016-06-30' ELSE TO_DATE END TO_DT
FROM
(SELECT MEDICAID_RECIPIENT_ID AS ID, FROM_DATE, TO_DATE
FROM PHClaims.dbo.vEligibility
WHERE TO_DATE>'2015-06-30' AND FROM_DATE<'2016-07-01' AND DUAL_ELIG='N') a) b;

SELECT ID, FR_DT, TO_DT,
LAG(FR_DT,1,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG1_FR_DT, 
LAG(TO_DT,1,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG1_TO_DT,
LAG(TO_DT,2,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG2_TO_DT,
LAG(TO_DT,3,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG3_TO_DT,
LAG(TO_DT,4,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG4_TO_DT,
LAG(TO_DT,5,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG5_TO_DT,
LAG(TO_DT,6,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG6_TO_DT,
LAG(TO_DT,7,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG7_TO_DT,
LAG(TO_DT,8,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG8_TO_DT,
LAG(TO_DT,9,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG9_TO_DT,
LAG(TO_DT,10,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG10_TO_DT,
LAG(TO_DT,11,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG11_TO_DT,
ROW_NUMBER() OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS ROW
INTO #A1_2
FROM #A1_1;

SELECT ID, ROW, 
CASE WHEN FR_DT<=LAG1_TO_DT THEN LAG1_TO_DT ELSE FR_DT END FR_DT,
TO_DT, LAG1_FR_DT AS LAG_FR_DT, LAG1_TO_DT AS LAG_TO_DT
INTO #A1_3
FROM
(SELECT *,
CASE WHEN ROW>1 AND '2016-06-30' 
IN(LAG1_TO_DT, LAG2_TO_DT,LAG3_TO_DT,LAG4_TO_DT,LAG5_TO_DT,LAG6_TO_DT,LAG7_TO_DT,LAG8_TO_DT,LAG9_TO_DT,LAG10_TO_DT,LAG11_TO_DT)
THEN 1 END AS DUP
FROM #A1_2) a
WHERE DUP IS NULL;

SELECT *, DATEDIFF(DAY, LAG_TO_DT,FR_DT) AS GAPDAYS,
CASE WHEN FR_DT>=LAG_FR_DT AND TO_DT <=LAG_TO_DT THEN 0
	 WHEN FR_DT<LAG_TO_DT AND TO_DT >LAG_TO_DT THEN DATEDIFF(DAY, LAG_TO_DT,TO_DT)
	 WHEN FR_DT<LAG_FR_DT AND TO_DT >LAG_FR_DT THEN DATEDIFF(DAY, FR_DT, LAG_FR_DT)
	 WHEN FR_DT<LAG_FR_DT AND TO_DT >LAG_TO_DT THEN (DATEDIFF(DAY, FR_DT, TO_DT))-(DATEDIFF(DAY, LAG_FR_DT, LAG_TO_DT))
	 ELSE DATEDIFF(DAY, FR_DT, TO_DT) END AS DAYS
INTO #A1_4
FROM #A1_3
ORDER BY ID;

SELECT * INTO #A1_5 
FROM #A1_4
WHERE DAYS<>0;

SELECT ID, ROUND(SUMDAYS/30,0) AS MM_MON
INTO #A1_6
FROM
(SELECT ID, SUM(DAYS) AS SUMDAYS, MAX(GAPDAYS) AS MAXGAP
FROM #A1_5
GROUP BY ID) d
WHERE SUMDAYS>320 AND (MAXGAP<=45 OR MAXGAP IS NULL);


--Step 1b. the previous year
SELECT DISTINCT ID, FR_DT, TO_DT INTO #A2_1
FROM
(SELECT ID,
CASE WHEN FROM_DATE<'2014-07-01' THEN '2014-07-01' ELSE FROM_DATE END FR_DT,
CASE WHEN TO_DATE>'2015-06-30' THEN '2015-06-30' ELSE TO_DATE END TO_DT
FROM
(SELECT MEDICAID_RECIPIENT_ID AS ID, FROM_DATE, TO_DATE
FROM PHClaims.dbo.vEligibility
WHERE TO_DATE>'2014-06-30' AND FROM_DATE<'2015-07-01' AND DUAL_ELIG='N') a) b;

SELECT ID, FR_DT, TO_DT,
LAG(FR_DT,1,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG1_FR_DT, 
LAG(TO_DT,1,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG1_TO_DT,
LAG(TO_DT,2,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG2_TO_DT,
LAG(TO_DT,3,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG3_TO_DT,
LAG(TO_DT,4,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG4_TO_DT,
LAG(TO_DT,5,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG5_TO_DT,
LAG(TO_DT,6,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG6_TO_DT,
LAG(TO_DT,7,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG7_TO_DT,
LAG(TO_DT,8,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG8_TO_DT,
LAG(TO_DT,9,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG9_TO_DT,
LAG(TO_DT,10,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG10_TO_DT,
LAG(TO_DT,11,NULL) OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS LAG11_TO_DT,
ROW_NUMBER() OVER(PARTITION BY ID ORDER BY ID, FR_DT, TO_DT) AS ROW
INTO #A2_2
FROM #A2_1;

SELECT ID, ROW, 
CASE WHEN FR_DT<=LAG1_TO_DT THEN LAG1_TO_DT ELSE FR_DT END FR_DT,
TO_DT, LAG1_FR_DT AS LAG_FR_DT, LAG1_TO_DT AS LAG_TO_DT
INTO #A2_3
FROM
(SELECT *,
CASE WHEN ROW>1 AND '2015-06-30' 
IN(LAG1_TO_DT, LAG2_TO_DT,LAG3_TO_DT,LAG4_TO_DT,LAG5_TO_DT,LAG6_TO_DT,LAG7_TO_DT,LAG8_TO_DT,LAG9_TO_DT,LAG10_TO_DT,LAG11_TO_DT)
THEN 1 END AS DUP
FROM #A2_2) a
WHERE DUP IS NULL;

SELECT *, DATEDIFF(DAY, LAG_TO_DT,FR_DT) AS GAPDAYS,
CASE WHEN FR_DT>=LAG_FR_DT AND TO_DT <=LAG_TO_DT THEN 0
	 WHEN FR_DT<LAG_TO_DT AND TO_DT >LAG_TO_DT THEN DATEDIFF(DAY, LAG_TO_DT,TO_DT)
	 WHEN FR_DT<LAG_FR_DT AND TO_DT >LAG_FR_DT THEN DATEDIFF(DAY, FR_DT, LAG_FR_DT)
	 WHEN FR_DT<LAG_FR_DT AND TO_DT >LAG_TO_DT THEN (DATEDIFF(DAY, FR_DT, TO_DT))-(DATEDIFF(DAY, LAG_FR_DT, LAG_TO_DT))
	 ELSE DATEDIFF(DAY, FR_DT, TO_DT) END AS DAYS
INTO #A2_4
FROM #A2_3
ORDER BY ID;

SELECT * INTO #A2_5 
FROM #A2_4
WHERE DAYS<>0;

SELECT ID AS ID2
INTO #A2_6
FROM
(SELECT ID, SUM(DAYS) AS SUMDAYS, MAX(GAPDAYS) AS MAXGAP
FROM #A2_5
GROUP BY ID) d
WHERE SUMDAYS>320 AND (MAXGAP<=45 OR MAXGAP IS NULL);

--Get demographics from the most recent year
SELECT * INTO #A7
FROM
(SELECT MEDICAID_RECIPIENT_ID AS ID3, GENDER, RACE1, HISPANIC_ORIGIN_NAME AS HISP, 
(DATEDIFF(YEAR, BIRTH_DATE, '2016-06-30')) AS AGE, FROM_DATE, TO_DATE,
ROW_NUMBER() OVER(PARTITION BY MEDICAID_RECIPIENT_ID ORDER BY MEDICAID_RECIPIENT_ID, FROM_DATE DESC, TO_DATE DESC) AS ROW
FROM PHClaims.dbo.vEligibility
WHERE TO_DATE>'2015-06-30' AND FROM_DATE<'2016-07-01' AND DUAL_ELIG='N') a
WHERE ROW=1 AND AGE>=18;


DROP TABLE #A;
--#A includes the cases in the most recent year
SELECT ID3,AGE, GENDER,RACE1,HISP,MM_MON INTO #A
FROM #A7
INNER JOIN #A1_6
ON #A7.ID3=#A1_6.ID
INNER JOIN #A2_6
ON #A7.ID3=#A2_6.ID2;

SELECT SUM(MM_MON) FROM #A;
SELECT * FROM #A;

--STEP 2: Generate numerator
--use ED value set of revenue_code, do not include ED visits that result in an inpatient stay
--exclude encounters with: (1) dx1 is mental health or chemical dependency (see value sets), 
--(2) psychiatry (value set), 
--(3) electroconvulsive therapy (value set), and 
--(4) alcohol or drug rehavilitation or detoxification (value set)

DROP TABLE #B1;
SELECT ID, FR_SDT, TO_SDT, CTYPE, DX1, DX1_S1, DX1_S2, DX1_S3,PC1,PC2,PC3,PC4,PC5,POS,STATUS,RCODE,
CASE WHEN ISNUMERIC(DX1_S3) =1 THEN CAST(DX1_S3 AS int) ELSE NULL END AS DX1_S3X,
CASE WHEN ISNUMERIC(DX1_S2) =1 THEN CAST(DX1_S2 AS int) ELSE NULL END AS DX1_S2X
INTO #B1
FROM
(SELECT MEDICAID_RECIPIENT_ID AS ID, FROM_SRVC_DATE AS FR_SDT, TO_SRVC_DATE AS TO_SDT,
PRIMARY_DIAGNOSIS_CODE AS DX1,
SUBSTRING(PRIMARY_DIAGNOSIS_CODE,1,1) AS DX1_S1,
SUBSTRING(PRIMARY_DIAGNOSIS_CODE,2,2) AS DX1_S2,
CASE WHEN PLACE_OF_SERVICE LIKE '%hospital%' THEN 1 ELSE 0 END AS DTH,
CASE WHEN REVENUE_CODE LIKE '010[01]' OR (REVENUE_CODE>='0110' AND REVENUE_CODE<='0160') OR REVENUE_CODE LIKE '016[479]' OR 
REVENUE_CODE LIKE '017[012349]' OR REVENUE_CODE LIKE '019[012349]' OR REVENUE_CODE LIKE '020[0-9]' OR REVENUE_CODE LIKE '021[012349]' OR 
REVENUE_CODE LIKE '100[012]' THEN 1 ELSE 0 END AS INP,
LEFT(PRIMARY_DIAGNOSIS_CODE,3) AS DX1_S3,
PRCDR_CODE_1 AS PC1, PRCDR_CODE_2 AS PC2, PRCDR_CODE_3 AS PC3, PRCDR_CODE_4 AS PC4, PRCDR_CODE_5 AS PC5,  
REVENUE_CODE AS RCODE, ADMSN_SOURCE_NAME, PATIENT_STATUS_DESC AS STATUS, CLM_TYPE_CID AS CTYPE,
PLACE_OF_SERVICE AS POS
FROM PHClaims.dbo.vClaims
WHERE FROM_SRVC_DATE BETWEEN '2015-07-01' AND '2016-06-30') a
WHERE (RCODE LIKE '045[01269]' OR RCODE LIKE '0981' OR POS LIKE '%23%');

--the following PC codes did not add any cases, THE INP code also did not drop any cases
or PC1 LIKE '9928[1-5]' or
PC2 LIKE '9928[1-5]' OR PC3 LIKE '9928[1-5]' OR PC4 LIKE '9928[1-5]' OR PC5 LIKE '9928[1-5]');

DROP TABLE #B2;
SELECT DISTINCT ID, FR_SDT
INTO #B2
FROM
(SELECT *,
CASE WHEN (DX1_S3X>=290 AND DX1_S3X<=316) OR
(DX1_S3>='F03' AND DX1_S3<='F53') OR
(DX1_S3>='F55' AND DX1_S3<='F69') OR
(DX1_S3>='F80' AND DX1_S3<='F99') OR
PC1 LIKE '942[67]%' OR PC1 LIKE 'GZB[0-4]%ZZZ' OR
PC2 LIKE '942[67]%' OR PC2 LIKE 'GZB[0-4]%ZZZ' OR 
PC3 LIKE '942[67]%' OR PC3 LIKE 'GZB[0-4]%ZZZ' OR 
PC4 LIKE '942[67]%' OR PC4 LIKE 'GZB[0-4]%ZZZ' OR 
PC5 LIKE '942[67]%' OR PC5 LIKE 'GZB[0-4]%ZZZ' OR
PC1 LIKE '946%' OR PC1 LIKE 'HZ2ZZZZ' OR PC1 LIKE 'HZ[[34589]%[1-9]%ZZZ' OR PC1 LIKE 'HZ[345]%[0BC]%ZZZ' OR PC1 LIKE 'HZ5DZZZ' OR
PC2 LIKE '946%' OR PC2 LIKE 'HZ2ZZZZ' OR PC2 LIKE 'HZ[[34589]%[1-9]%ZZZ' OR PC2 LIKE 'HZ[345]%[0BC]%ZZZ' OR PC2 LIKE 'HZ5DZZZ' OR
PC3 LIKE '946%' OR PC3 LIKE 'HZ2ZZZZ' OR PC3 LIKE 'HZ[[34589]%[1-9]%ZZZ' OR PC3 LIKE 'HZ[345]%[0BC]%ZZZ' OR PC3 LIKE 'HZ5DZZZ' OR
PC4 LIKE '946%' OR PC4 LIKE 'HZ2ZZZZ' OR PC4 LIKE 'HZ[[34589]%[1-9]%ZZZ' OR PC4 LIKE 'HZ[345]%[0BC]%ZZZ' OR PC4 LIKE 'HZ5DZZZ' OR
PC5 LIKE '946%' OR PC5 LIKE 'HZ2ZZZZ' OR PC5 LIKE 'HZ[[34589]%[1-9]%ZZZ' OR PC5 LIKE 'HZ[345]%[0BC]%ZZZ' OR PC5 LIKE 'HZ5DZZZ'
THEN 1 ELSE 0 END AS EXCL
FROM #B1) a
WHERE EXCL=0;


SELECT *
FROM #B2
INNER JOIN #A
ON #B2.ID=#A.ID3;

SELECT * FROM #A

SELECT SUM(MM_MON) AS SUM_M FROM #A;